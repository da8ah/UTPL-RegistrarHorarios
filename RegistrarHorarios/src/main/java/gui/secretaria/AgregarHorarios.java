/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.secretaria;

import Logica.ValidarEntradas;
import clases.AnioLectivo;
import clases.Docente;
import clases.Grado;
import clases.Hora;
import clases.Horario;
import clases.Materia;
import clases.Paralelo;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.LogicaAnioLectivo;
import logica.LogicaDocente;
import logica.LogicaGrado;
import logica.LogicaHorario;
import logica.LogicaParalelo;

/**
 *
 * @author Danilo Alejandro Ochoa Hidalgo
 */
public class AgregarHorarios extends javax.swing.JFrame {

    private LogicaHorario objLogicaHorario = new LogicaHorario();
    private LogicaAnioLectivo objLogicaAnioLectivo = new LogicaAnioLectivo();
    private LogicaGrado objLogicaGrado = new LogicaGrado();
    private LogicaParalelo objLogicaParalelo = new LogicaParalelo();
    private LogicaDocente objLogicaDocente = new LogicaDocente();
    private ValidarEntradas validarEntradas = new ValidarEntradas();

    private ArrayList<Horario> objListadoHorarios;
    private ArrayList<Horario> objListadoHorariosEliminar;

    private ArrayList<Hora> objListadoHoras = new ArrayList<>();
    private ArrayList<Hora> objListadoHorasFin;

    private ArrayList<AnioLectivo> objListadoAniosLectivos;
    private ArrayList<Grado> objListadoGrados;

    private Horario objHorario = new Horario();
    private AnioLectivo objAnioLectivo;
    private Grado objGrado;
    private Paralelo objParalelo;
    private Docente objDocente;

    private int numPeriodos;
    private int numPeriodoRecreo;

    private boolean agregarActivado;

    /**
     * Creates new form CrearHorario
     */
    public AgregarHorarios() {
        initComponents();
        setLocationRelativeTo(null);

        /*
         * SE CREAN LAS HORAS PARA EL HORARIO INCLUYENDO UN PERIODO
         * PARA EL RECREO Y OTRO PARA LA SALIDA.
         * 
         * this.patronDeHoras (
         * 1. int = numero de Periodos
         * 2. int = hora de Inicio
         * 3. int = minutos de Inicio
         * 4. int = duración del Periodo en Minutos
         * 5. int = numero del Periodo del Recreo
         * 6. int = duracion del Periodo del Recreo
         * );
         */
        this.patronDeHoras(10, 7, 10, 40, 6, 30);

        // COMPLETAR COMBOBOXs QUE NO CAMBIAN
        this.listarCBConstantes();

        // CONFIGURAR LA PANTALLA INICIAL Y LOS COMBOBOXs RESTANTES
        this.entradasIniciales();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLCedula = new javax.swing.JLabel();
        jTFCedula = new javax.swing.JTextField();
        jBtnBuscar = new javax.swing.JButton();
        jCBGrado = new javax.swing.JComboBox<>();
        jLGrado = new javax.swing.JLabel();
        jLAnioLectivo = new javax.swing.JLabel();
        jCBAnioLectivo = new javax.swing.JComboBox<>();
        jCBParalelo = new javax.swing.JComboBox<>();
        jLParalelo = new javax.swing.JLabel();
        jCBHoraInicio = new javax.swing.JComboBox<>();
        jLHoraInicio = new javax.swing.JLabel();
        jCBHoraFin = new javax.swing.JComboBox<>();
        jLHoraFin = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTbHorario = new javax.swing.JTable();
        jBtnAgregar = new javax.swing.JButton();
        jBtnEliminar = new javax.swing.JButton();
        jBtnVolver = new javax.swing.JButton();
        jLAgregarHorarios = new javax.swing.JLabel();
        jCBDia = new javax.swing.JComboBox<>();
        jLDia = new javax.swing.JLabel();
        jCBMateria = new javax.swing.JComboBox<>();
        jLMateria = new javax.swing.JLabel();
        jBtnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLCedula.setText("Cédula");

        jBtnBuscar.setText("Buscar");
        jBtnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarActionPerformed(evt);
            }
        });

        jCBGrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBGradoActionPerformed(evt);
            }
        });

        jLGrado.setText("Grado");

        jLAnioLectivo.setText("Año Lectivo");

        jCBAnioLectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAnioLectivoActionPerformed(evt);
            }
        });

        jCBParalelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBParaleloActionPerformed(evt);
            }
        });

        jLParalelo.setText("Paralelo");

        jCBHoraInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBHoraInicioActionPerformed(evt);
            }
        });

        jLHoraInicio.setText("Hora Inicio");

        jCBHoraFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBHoraFinActionPerformed(evt);
            }
        });

        jLHoraFin.setText("Hora Fin");

        jTbHorario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbHorario.setCellSelectionEnabled(true);
        jTbHorario.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTbHorario);

        jBtnAgregar.setText("Agregar");
        jBtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarActionPerformed(evt);
            }
        });

        jBtnEliminar.setText("Eliminar");
        jBtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEliminarActionPerformed(evt);
            }
        });

        jBtnVolver.setText("Volver");
        jBtnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnVolverActionPerformed(evt);
            }
        });

        jLAgregarHorarios.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLAgregarHorarios.setText("AGREGAR HORARIOS");

        jCBDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBDiaActionPerformed(evt);
            }
        });

        jLDia.setText("Día");

        jCBMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBMateriaActionPerformed(evt);
            }
        });

        jLMateria.setText("Materia");

        jBtnCancelar.setText("Cancelar");
        jBtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(182, 182, 182)
                        .addComponent(jBtnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnVolver))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCBAnioLectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLAnioLectivo))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCBGrado, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLGrado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCBParalelo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLParalelo))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLDia)
                                        .addGap(65, 65, 65))
                                    .addComponent(jCBDia, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCBHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLHoraInicio))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLHoraFin)
                                    .addComponent(jCBHoraFin, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLMateria)
                                    .addComponent(jCBMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLCedula)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jBtnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTFCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLAgregarHorarios)
                                .addGap(318, 318, 318)))))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLAgregarHorarios)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLMateria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCBMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTFCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLCedula)
                                    .addComponent(jBtnBuscar))))
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLAnioLectivo)
                                        .addComponent(jLGrado))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jCBAnioLectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jCBGrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLParalelo)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jCBParalelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLHoraInicio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCBHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLHoraFin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCBHoraFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLDia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCBDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnAgregar)
                    .addComponent(jBtnEliminar)
                    .addComponent(jBtnVolver)
                    .addComponent(jBtnCancelar))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCBAnioLectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAnioLectivoActionPerformed
        // TODO add your handling code here
        if (this.jCBAnioLectivo.getSelectedItem() != null) {

            this.objAnioLectivo = (AnioLectivo) this.jCBAnioLectivo.getSelectedItem();

            // LISTENER PARA ACTIVAR ENTRADAS ELIMINAR
            if (comprobarEntradasEliminar()) {
                this.entradasEliminar();
            }

        } else {

            this.jCBGrado.setSelectedIndex(0);
            this.entradasVaciarAgregar();

        }

    }//GEN-LAST:event_jCBAnioLectivoActionPerformed

    private void jCBGradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBGradoActionPerformed
        // TODO add your handling code here:
        if (this.jCBGrado.getSelectedItem() != null) {

            this.objGrado = new Grado();
            this.objGrado = (Grado) this.jCBGrado.getSelectedItem();

            this.listarParalelo();
            this.jCBParalelo.setEnabled(true);

            // LISTENER PARA ACTIVAR ENTRADAS ELIMINAR
            if (comprobarEntradasEliminar()) {
                this.entradasEliminar();
            }

        } else {

            this.jCBParalelo.removeAllItems();
            this.jCBParalelo.setEnabled(false);
            this.entradasVaciarAgregar();

        }

    }//GEN-LAST:event_jCBGradoActionPerformed

    private void jCBParaleloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBParaleloActionPerformed
        // TODO add your handling code here:
        if (this.jCBParalelo.getSelectedItem() != null) {

            this.objParalelo = new Paralelo();
            this.objParalelo = (Paralelo) this.jCBParalelo.getSelectedItem();

            // LISTENER PARA ACTIVAR ENTRADAS ELIMINAR
            if (comprobarEntradasEliminar()) {
                this.entradasEliminar();
            }

        } else {

            this.entradasVaciarAgregar();

        }

    }//GEN-LAST:event_jCBParaleloActionPerformed

    private void jCBDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBDiaActionPerformed
        // TODO add your handling code here:
        if (this.jCBDia.getSelectedItem() != null) {
            this.objHorario.setDia(String.valueOf(this.jCBDia.getSelectedItem()));
        }

    }//GEN-LAST:event_jCBDiaActionPerformed

    private void jCBHoraInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBHoraInicioActionPerformed
        // TODO add your handling code here:
        if (this.jCBHoraInicio.getSelectedItem() != null) {
            Hora horaInicio = (Hora) this.jCBHoraInicio.getSelectedItem();
            this.objHorario.setHoraInicio(horaInicio.getHoraInicio());

            this.listarHoraFin();

        }

    }//GEN-LAST:event_jCBHoraInicioActionPerformed

    private void jCBHoraFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBHoraFinActionPerformed
        // TODO add your handling code here:
        if (this.jCBHoraFin.getSelectedItem() != null) {

            Hora horaFin = (Hora) this.jCBHoraFin.getSelectedItem();
            this.objHorario.setHoraFin(horaFin.getHoraInicio());

        }

    }//GEN-LAST:event_jCBHoraFinActionPerformed

    private void jCBMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBMateriaActionPerformed
        // TODO add your handling code here:
        if (this.jCBMateria.getSelectedItem() != null) {

            Materia materia = (Materia) this.jCBMateria.getSelectedItem();
            this.objHorario.setMateria(materia);

        }

    }//GEN-LAST:event_jCBMateriaActionPerformed

    private void jBtnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarActionPerformed
        // TODO add your handling code here:
        if (this.jTFCedula.getText() != null && this.jTFCedula.isEnabled()) { // Flujo Normal

            if (validarEntradas.validarCedulas(this.jTFCedula.getText())) {

                if (buscarDocente()) {

                    JOptionPane.showMessageDialog(null, "Encontrado");

                    this.listarHorarioTable();

                    this.jTFCedula.setText(objDocente.getCedula());
                    this.jTFCedula.setEnabled(false);

                } else {
                    JOptionPane.showMessageDialog(null, "¡No Encontrado!", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(null, "¡Formato de Cédula Incorrecto!", "Información", JOptionPane.ERROR_MESSAGE);
            }

        } else { // Flujo Alterno

            this.jTFCedula.setEnabled(true);

        }

    }//GEN-LAST:event_jBtnBuscarActionPerformed

    private void jBtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarActionPerformed
        // TODO add your handling code here:
        if (!agregarActivado) {

            if (comprobarEntradasEliminar()) {
                this.entradasAgregar();
            } else {
                JOptionPane.showMessageDialog(null, "¡Complete los Campos!", "Información", JOptionPane.ERROR_MESSAGE);
            }

        } else {

            if (comprobarEntradasAgregar()) {

                this.objHorario.setDocente(objDocente);
                this.objHorario.setAnioLectivo(objAnioLectivo);
                this.objHorario.setGrado(objGrado);

                String mensaje = fragmentarAgregarHorarios();
                if (mensaje.equals("")) {

                    if (agregarHorarios()) {

                        JOptionPane.showMessageDialog(null, "Agregado Correctamente" + mensaje);
                        this.listarHorarioTable();

                    } else {
                        JOptionPane.showMessageDialog(null, "¡Fallo al Guardar!", "Error en BD", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "¡Ya Ocupado!" + mensaje, "Duplicado", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(null, "¡Complete los Campos!", "Información", JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_jBtnAgregarActionPerformed

    private void jBtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEliminarActionPerformed
        // TODO add your handling code here:
        if (!this.jTbHorario.getSelectionModel().isSelectionEmpty()) {

            if (seleccionarHorariosEliminar()) {

                int confirmacion = JOptionPane.showConfirmDialog(null, "¿Eliminar Permanentemente los Elementos Seleccionados?", "¡Advertencia!", JOptionPane.ERROR_MESSAGE);
                if (confirmacion == JOptionPane.YES_OPTION) {

                    if (eliminarHorarios()) {
                        JOptionPane.showMessageDialog(null, "Eliminado Correctamente");
                        this.listarHorarioTable();

                    } else {
                        JOptionPane.showMessageDialog(null, "¡Fallo al Guardar!", "Error en BD", JOptionPane.ERROR_MESSAGE);
                    }

                }

            }

        } else {

            JOptionPane.showMessageDialog(null, "¡Seleccione un Campo!", "Información", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_jBtnEliminarActionPerformed

    private void jBtnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnVolverActionPerformed
        // TODO add your handling code here:
        VentanaSecretaria ventanaSecretaria = new VentanaSecretaria();
        ventanaSecretaria.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jBtnVolverActionPerformed

    private void jBtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarActionPerformed
        // TODO add your handling code here:
        this.entradasEliminar();

    }//GEN-LAST:event_jBtnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarHorarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarHorarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarHorarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarHorarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarHorarios().setVisible(true);
            }
        });
    }

    // FUNCIONES PARA MANIPULAR OBJETOS
    private boolean buscarHorario() {
        Horario horario = new Horario(objHorario);
        horario = objLogicaHorario.buscarHorario(horario);
        return horario.getIdHorario() != 0; // return [true] si encuentra el objeto;
    }

    private boolean buscarDocente() {
        this.objDocente.setCedula(this.jTFCedula.getText());
        this.objDocente = objLogicaDocente.buscarDocente(objDocente);
        return this.objDocente.getCedula() != null; // return [true] si encuentra el objeto;
    }

    private void patronDeHoras(int numPeriodos, int horaInicio, int minutosInicio, int duracionPeriodoEnMin, int numPeriodoRecreo, int duracionRecreo) {
        // Se crean las Horas para el Horario
        // Se reducen en uno para usarlos en listarHorarioTable();
        this.numPeriodos = numPeriodos - 1;
        this.numPeriodoRecreo = numPeriodoRecreo - 1;

        Calendar horaCalendar = Calendar.getInstance();
        horaCalendar.set(Calendar.HOUR_OF_DAY, horaInicio);
        horaCalendar.set(Calendar.MINUTE, minutosInicio);
        horaCalendar.set(Calendar.SECOND, 0);
        horaCalendar.set(Calendar.MILLISECOND, 0);
        for (int i = 0; i < numPeriodos; i++) {
            Hora horaHorario = new Hora();
            horaHorario.setIdHora(i);
            horaHorario.setHoraInicio(horaCalendar.getTime());

            // Para imprimir un periodo de 30MIN en el RECREO
            if (i == numPeriodoRecreo - 1) {
                horaCalendar.add(Calendar.MINUTE, duracionRecreo);
            } else {
                horaCalendar.add(Calendar.MINUTE, duracionPeriodoEnMin);
            }

            horaHorario.setHoraFin(horaCalendar.getTime());
            this.objListadoHoras.add(horaHorario);
        }

        // Se hace REFERENCIA a objListadoHoras desde objListadoHorasFin;
        this.objListadoHorasFin = this.objListadoHoras;
        // Ahora ambos apuntan a la MISMA Dirección de Memoria Física
    }

    private String imprimirHora(Date hora, String formato) {
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        String fechaConsistente = dateFormat.format(hora);
        return fechaConsistente.toUpperCase();
    }

    private boolean comprobarEntradasEliminar() {
        return this.jCBAnioLectivo.getSelectedItem() != null
                && this.jCBGrado.getSelectedItem() != null
                && this.jCBParalelo.getSelectedItem() != null;
    }

    private boolean comprobarEntradasAgregar() {
        return this.jCBAnioLectivo.getSelectedItem() != null
                && this.jCBGrado.getSelectedItem() != null
                && this.jCBParalelo.getSelectedItem() != null
                && this.jCBDia.getSelectedItem() != null
                && this.jCBHoraInicio.getSelectedItem() != null
                && this.jCBHoraFin.getSelectedItem() != null
                && this.jCBMateria.getSelectedItem() != null
                && this.jTFCedula.getText() != null
                && !this.jTFCedula.isEnabled();
    }

    // Divide y compara que no se repitan Horarios
    private String fragmentarAgregarHorarios() {
        Hora horaInicio = (Hora) this.jCBHoraInicio.getSelectedItem();
        Hora horaFin = (Hora) this.jCBHoraFin.getSelectedItem();
        String mensaje = "";
        for (int i = horaInicio.getIdHora(); i < horaFin.getIdHora(); i++) {
            if (i != numPeriodoRecreo && i != numPeriodos) {
                this.objHorario.setHoraInicio(objListadoHoras.get(i).getHoraInicio());
                this.objHorario.setHoraFin(objListadoHoras.get(i).getHoraFin());
                if (buscarHorario()) {
                    mensaje = mensaje + "\n" + objHorario.getDia() + "  "
                            + imprimirHora(objListadoHoras.get(i).getHoraInicio(), "HH:mm") + " - "
                            + imprimirHora(objListadoHoras.get(i).getHoraFin(), "HH:mm");
                }
            }
        }
        return mensaje;
    }

    private boolean agregarHorarios() {
        Hora horaInicio = (Hora) this.jCBHoraInicio.getSelectedItem();
        Hora horaFin = (Hora) this.jCBHoraFin.getSelectedItem();
        return this.objLogicaHorario.insertarHorarios(horaInicio, horaFin, numPeriodoRecreo, numPeriodos, objHorario, objListadoHoras);
    }

    // Carga todos los Horarios Seleccionados para Eliminar
    private boolean seleccionarHorariosEliminar() {
        this.objListadoHorariosEliminar = new ArrayList<>();

        int rowIndex = this.jTbHorario.getSelectedRow();
        int colIndex = this.jTbHorario.getSelectedColumn();

        for (int i = 0; i < this.jTbHorario.getSelectedRowCount(); i++) {
            for (int j = 0; j < this.jTbHorario.getSelectedColumnCount(); j++) {

                if (rowIndex != numPeriodoRecreo && rowIndex != numPeriodos) {

                    if (this.jTbHorario.getValueAt(rowIndex, colIndex) != null) {
                        Horario horario = (Horario) this.jTbHorario.getValueAt(rowIndex, colIndex);
                        this.objListadoHorariosEliminar.add(horario);
                    }

                }

                // ÍNDICE DE COLUMNAS SELECCIONADAS
                colIndex++; // COLUMNA SELECCIONADA++;
            }

            // ÍNDICE DE FILAS SELECCIONADAS
            colIndex = this.jTbHorario.getSelectedColumn(); // COLUMNA SELECCIONADA = 0;
            rowIndex++; // FILA SELECCIONADA++;
        }

        return !objListadoHorariosEliminar.isEmpty();
    }

    private boolean eliminarHorarios() {
        return this.objLogicaHorario.eliminarHorarios(objListadoHorariosEliminar);
    }

    // FUNCIONES PARA LISTAR
    private void listarCBConstantes() {
        this.listarAnioLectivo();
        this.listarGrado();
        this.listarDia();
        this.listarHoraInicio(numPeriodoRecreo);
    }

    private void listarAnioLectivo() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        this.objListadoAniosLectivos = new ArrayList<>();

        comboBoxModel.addElement(null);

        this.objListadoAniosLectivos = objLogicaAnioLectivo.cargarAniosLectivos(objListadoAniosLectivos);
        this.objListadoAniosLectivos.forEach((anioLectivo) -> {
            comboBoxModel.addElement(anioLectivo);
        });

        this.jCBAnioLectivo.setModel(comboBoxModel);
    }

    private void listarGrado() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        this.objListadoGrados = new ArrayList<>();

        comboBoxModel.addElement(null);

        this.objListadoGrados = objLogicaGrado.cargarGrados(objListadoGrados);
        this.objListadoGrados.forEach((grado) -> {
            comboBoxModel.addElement(grado);
        });

        this.jCBGrado.setModel(comboBoxModel);
    }

    private void listarParalelo() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        this.objGrado.setParalelos(new ArrayList<>());

        comboBoxModel.addElement(null);

        this.objGrado = objLogicaParalelo.cargarParalelos(objGrado);
        this.objGrado.getParalelos().forEach((paralelo) -> {
            comboBoxModel.addElement(paralelo);
        });

        this.jCBParalelo.setModel(comboBoxModel);
    }

    private void listarDia() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        String[] dias = {"Lunes", "Martes", "Miercoles", "Jueves", "Viernes"};

        comboBoxModel.addElement(null);

        for (String dia : dias) {
            comboBoxModel.addElement(dia);
        }

        this.jCBDia.setModel(comboBoxModel);
    }

    private void listarHoraInicio(int numPeriodoRecreo) {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();

        comboBoxModel.addElement(null);

        this.objListadoHoras.forEach((horaHorario) -> {
            if (horaHorario.getIdHora() != numPeriodoRecreo && horaHorario.getIdHora() != objListadoHoras.size() - 1) {
                comboBoxModel.addElement(horaHorario);
            }
        });

        this.jCBHoraInicio.setModel(comboBoxModel);
    }

    private void listarHoraFin() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();

        comboBoxModel.addElement(null);

        // Se reduce el INDICE en uno por el aumento del elemento "null";
        Hora horaInicio = (Hora) this.jCBHoraInicio.getSelectedItem();

        this.objListadoHorasFin.forEach((horaFin) -> {
            // Se aumenta en uno numPeriodoRecreo para quitar el elemento de horaFin
            if (horaFin.getIdHora() > horaInicio.getIdHora() && horaFin.getIdHora() != numPeriodoRecreo + 1) {
                comboBoxModel.addElement(horaFin);
            }
        });

        this.jCBHoraFin.setModel(comboBoxModel);
    }

    private void listarMateria() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        this.objGrado.setMaterias(new ArrayList<>());

        comboBoxModel.addElement(null);

        this.objGrado = objLogicaGrado.cargarMaterias(objGrado);
        this.objGrado.getMaterias().forEach((materia) -> {
            comboBoxModel.addElement(materia);
        });

        this.jCBMateria.setModel(comboBoxModel);
    }

    private void listarHorarioTable() {
        DefaultTableModel tableModel = (DefaultTableModel) this.jTbHorario.getModel();
        tableModel.setRowCount(0);

        // CARGA DE DATOS EN objBusqueda
        Horario objBusqueda = new Horario();
        objBusqueda.setAnioLectivo(this.objAnioLectivo);
        objBusqueda.setGrado(this.objGrado);
        objBusqueda.getGrado().setParalelos(new ArrayList<>());
        objBusqueda.getGrado().getParalelos().add(this.objParalelo);

        if (objDocente.getIdDocente() != 0) {
            objBusqueda.setDocente(objDocente);
        }

        // BÚSQUEDA DE objListadoHorarios en BD
        this.objListadoHorarios = new ArrayList<>();
        this.objListadoHorarios = objLogicaHorario.cargarHorarios(objBusqueda);

        // CARGAR LAS FILAS CON LAS HORAS
        objListadoHoras.forEach((horaHorario) -> {

            if (horaHorario.getIdHora() == numPeriodoRecreo) { // Carga el Periodo del Recreo
                Object[] fila = {"R", "E", "C", "R", "E", "O"};
                tableModel.addRow(fila);
            } else if (horaHorario.getIdHora() == numPeriodos) { // Carga el Periodo de Salida
                Object[] fila = {"S", "A", "L", "I", "D", "A"};
                tableModel.addRow(fila);
            } else {
                Object[] fila = new Object[tableModel.getColumnCount()];
                tableModel.addRow(fila);
                tableModel.setValueAt(imprimirHora(horaHorario.getHoraInicio(), "HH:mm")
                        + " - " + imprimirHora(horaHorario.getHoraFin(), "HH:mm"),
                        horaHorario.getIdHora(), 0);
            }

        });

        // CARGAR LOS HORARIOS
        objListadoHorarios.forEach((horario) -> {
            if (this.jTFCedula.getText().equals(horario.getDocente().getCedula())) {
                horario.setPresentar(true);
            }
            if (obtenerIndiceHora(horario) != -1 && obtenerIndiceDia(horario) != -1) {
                tableModel.setValueAt(horario,
                        obtenerIndiceHora(horario),
                        obtenerIndiceDia(horario));
            } else {
                System.out.println("Error al Cargar los Datos en la Tabla");
            }
        });

        // ESTILOS PARA LA TABLA
        obtenerEstilosTable();
    }

    private int obtenerIndiceHora(Horario horario) {
        int indice = -1;
        for (Hora hora : objListadoHoras) {
            if (imprimirHora(horario.getHoraInicio(), "HH:mm").equals(imprimirHora(hora.getHoraInicio(), "HH:mm"))) {
                indice = hora.getIdHora();
            }
        }
        return indice;
    }

    private int obtenerIndiceDia(Horario horario) {
        int indice = -1;
        switch (horario.getDia()) {
            case "Lunes":
                indice = 1;
                break;
            case "Martes":
                indice = 2;
                break;
            case "Miercoles":
                indice = 3;
                break;
            case "Jueves":
                indice = 4;
                break;
            case "Viernes":
                indice = 5;
                break;
        }
        return indice;
    }

    private void obtenerEstilosTable() {

        for (int i = 0; i < this.jTbHorario.getRowCount(); i++) {
            this.jTbHorario.setRowHeight(i, 20);
        }

    }

    // OPCIONES DESPLEGADAS POR EVENTO PARA LA PANTALLA
    private void entradasVaciar() {
        this.jCBAnioLectivo.setSelectedIndex(0);
        this.jCBGrado.setSelectedIndex(0);
        this.jCBParalelo.removeAllItems();
        this.jCBDia.setSelectedIndex(0);
        this.jCBHoraInicio.setSelectedIndex(0);
        this.jCBHoraFin.removeAllItems();
        this.jCBMateria.removeAllItems();

        this.jTFCedula.setText(null);

        DefaultTableModel tableModel = (DefaultTableModel) this.jTbHorario.getModel();
        tableModel.setRowCount(0);
    }

    private void entradasVaciarAgregar() {
        this.jCBDia.setSelectedIndex(0);
        this.jCBHoraInicio.setSelectedIndex(0);
        this.jCBHoraFin.removeAllItems();
        this.jCBMateria.removeAllItems();

        this.jTFCedula.setText(null);

        DefaultTableModel tableModel = (DefaultTableModel) this.jTbHorario.getModel();
        tableModel.setRowCount(0);
    }

    private void entradasIniciales() {
        this.entradasVaciar();

        this.jCBAnioLectivo.setEnabled(true);
        this.jCBGrado.setEnabled(true);
        this.jCBParalelo.setEnabled(false);
        this.jCBDia.setEnabled(false);
        this.jCBHoraInicio.setEnabled(false);
        this.jCBHoraFin.setEnabled(false);
        this.jCBMateria.setEnabled(false);

        this.jTFCedula.setEnabled(false);

        this.jBtnBuscar.setEnabled(false);
        this.jBtnAgregar.setEnabled(false);
        this.jBtnEliminar.setEnabled(false);
        this.jBtnCancelar.setEnabled(false);
    }

    private void entradasEliminar() {
        agregarActivado = false;

        this.objDocente = new Docente();

        this.entradasVaciarAgregar();
        this.listarHorarioTable();

        this.jCBAnioLectivo.setEnabled(true);
        this.jCBGrado.setEnabled(true);
        this.jCBParalelo.setEnabled(true);
        this.jCBDia.setEnabled(false);
        this.jCBHoraInicio.setEnabled(false);
        this.jCBHoraFin.setEnabled(false);
        this.jCBMateria.setEnabled(false);

        this.jTFCedula.setEnabled(false);

        this.jBtnBuscar.setEnabled(false);
        this.jBtnAgregar.setEnabled(true);
        this.jBtnEliminar.setEnabled(true);
        this.jBtnCancelar.setEnabled(false);
    }

    private void entradasAgregar() {
        agregarActivado = true;
        this.listarMateria();

        this.jCBAnioLectivo.setEnabled(false);
        this.jCBGrado.setEnabled(false);
        this.jCBParalelo.setEnabled(false);
        this.jCBDia.setEnabled(true);
        this.jCBHoraInicio.setEnabled(true);
        this.jCBHoraFin.setEnabled(true);
        this.jCBMateria.setEnabled(true);

        this.jTFCedula.setEnabled(true);

        this.jBtnBuscar.setEnabled(true);
        this.jBtnAgregar.setEnabled(true);
        this.jBtnEliminar.setEnabled(true);
        this.jBtnCancelar.setEnabled(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAgregar;
    private javax.swing.JButton jBtnBuscar;
    private javax.swing.JButton jBtnCancelar;
    private javax.swing.JButton jBtnEliminar;
    private javax.swing.JButton jBtnVolver;
    private javax.swing.JComboBox<String> jCBAnioLectivo;
    private javax.swing.JComboBox<String> jCBDia;
    private javax.swing.JComboBox<String> jCBGrado;
    private javax.swing.JComboBox<String> jCBHoraFin;
    private javax.swing.JComboBox<String> jCBHoraInicio;
    private javax.swing.JComboBox<String> jCBMateria;
    private javax.swing.JComboBox<String> jCBParalelo;
    private javax.swing.JLabel jLAgregarHorarios;
    private javax.swing.JLabel jLAnioLectivo;
    private javax.swing.JLabel jLCedula;
    private javax.swing.JLabel jLDia;
    private javax.swing.JLabel jLGrado;
    private javax.swing.JLabel jLHoraFin;
    private javax.swing.JLabel jLHoraInicio;
    private javax.swing.JLabel jLMateria;
    private javax.swing.JLabel jLParalelo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFCedula;
    private javax.swing.JTable jTbHorario;
    // End of variables declaration//GEN-END:variables

}
