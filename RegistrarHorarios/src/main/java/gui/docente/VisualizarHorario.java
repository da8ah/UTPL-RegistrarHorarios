/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.docente;

import clases.AnioLectivo;
import clases.Docente;
import clases.Hora;
import clases.Horario;
import gui.Autenticacion;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.LogicaAnioLectivo;
import logica.LogicaDocente;
import logica.LogicaHorario;

/**
 *
 * @author Usuario
 */
public class VisualizarHorario extends javax.swing.JFrame {

    private LogicaHorario objLogicaHorario = new LogicaHorario();
    private LogicaAnioLectivo objLogicaAnioLectivo = new LogicaAnioLectivo();
    private LogicaDocente objLogicaDocente = new LogicaDocente();

    private ArrayList<Horario> objListadoHorarios;

    private ArrayList<Hora> objListadoHoras = new ArrayList<>();

    private ArrayList<AnioLectivo> objListadoAniosLectivos;

    private Horario objHorario = new Horario();
    private AnioLectivo objAnioLectivo;
    private Docente objDocente; // Objeto para Autenticación

    private int numPeriodos;
    private int numPeriodoRecreo;

    /**
     * Creates new form VisualizarMateria
     */
    public VisualizarHorario() {
        initComponents();
        setLocationRelativeTo(null);

        /*
         * SE CREAN LAS HORAS PARA EL HORARIO INCLUYENDO UN PERIODO
         * PARA EL RECREO Y OTRO PARA LA SALIDA.
         * 
         * this.patronDeHoras (
         * 1. int = numero de Periodos
         * 2. int = hora de Inicio
         * 3. int = minutos de Inicio
         * 4. int = duración del Periodo en Minutos
         * 5. int = numero del Periodo del Recreo
         * 6. int = duracion del Periodo del Recreo
         * );
         */
        this.patronDeHoras(10, 7, 10, 40, 6, 30);

        this.listarAnioLectivo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTbHorario = new javax.swing.JTable();
        jBtnVolver = new javax.swing.JButton();
        jLVisualizarHorario = new javax.swing.JLabel();
        jCBAnioLectivo = new javax.swing.JComboBox<>();
        jLAnioLectivo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTbHorario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbHorario.setCellSelectionEnabled(true);
        jTbHorario.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTbHorario);

        jBtnVolver.setText("Volver");
        jBtnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnVolverActionPerformed(evt);
            }
        });

        jLVisualizarHorario.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLVisualizarHorario.setText("VISUALIZAR HORARIO");

        jCBAnioLectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAnioLectivoActionPerformed(evt);
            }
        });

        jLAnioLectivo.setText("Año Lectivo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCBAnioLectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLAnioLectivo)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(388, 388, 388)
                        .addComponent(jLVisualizarHorario))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(419, 419, 419)
                        .addComponent(jBtnVolver)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLVisualizarHorario)
                .addGap(18, 18, 18)
                .addComponent(jLAnioLectivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCBAnioLectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jBtnVolver)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnVolverActionPerformed
        // TODO add your handling code here:
        VentanaDocente ventanaDocente = new VentanaDocente();
        ventanaDocente.setVisible(true);
        ventanaDocente.setDocente(objDocente);
        this.dispose();

    }//GEN-LAST:event_jBtnVolverActionPerformed

    private void jCBAnioLectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAnioLectivoActionPerformed
        // TODO add your handling code here
        if (this.jCBAnioLectivo.getSelectedItem() != null) {

            if (comprobarAutenticacion()) {  // COMPRUEBA AUTENTICACIÓN

                this.objAnioLectivo = (AnioLectivo) this.jCBAnioLectivo.getSelectedItem();
                this.listarHorarioTable();

            }

        }

    }//GEN-LAST:event_jCBAnioLectivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualizarHorario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualizarHorario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualizarHorario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualizarHorario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisualizarHorario().setVisible(true);
            }
        });
    }

    // FUNCIONES PARA MANIPULAR OBJETOS
    private void patronDeHoras(int numPeriodos, int horaInicio, int minutosInicio, int duracionPeriodoEnMin, int numPeriodoRecreo, int duracionRecreo) {
        // Se crean las Horas para el Horario
        // Se reducen en uno para usarlos en listarHorarioTable();
        this.numPeriodos = numPeriodos - 1;
        this.numPeriodoRecreo = numPeriodoRecreo - 1;

        Calendar horaCalendar = Calendar.getInstance();
        horaCalendar.set(Calendar.HOUR_OF_DAY, horaInicio);
        horaCalendar.set(Calendar.MINUTE, minutosInicio);
        horaCalendar.set(Calendar.SECOND, 0);
        horaCalendar.set(Calendar.MILLISECOND, 0);
        for (int i = 0; i < numPeriodos; i++) {
            Hora horaHorario = new Hora();
            horaHorario.setIdHora(i);
            horaHorario.setHoraInicio(horaCalendar.getTime());

            // Para imprimir un periodo de 30MIN en el RECREO
            if (i == numPeriodoRecreo - 1) {
                horaCalendar.add(Calendar.MINUTE, duracionRecreo);
            } else {
                horaCalendar.add(Calendar.MINUTE, duracionPeriodoEnMin);
            }

            horaHorario.setHoraFin(horaCalendar.getTime());
            this.objListadoHoras.add(horaHorario);
        }

    }

    private String imprimirHora(Date hora, String formato) {
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        String fechaConsistente = dateFormat.format(hora);
        return fechaConsistente.toUpperCase();
    }

    // FUNCIONES PARA LISTAR
    private void listarAnioLectivo() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        this.objListadoAniosLectivos = new ArrayList<>();

        comboBoxModel.addElement(null);

        this.objListadoAniosLectivos = objLogicaAnioLectivo.cargarAniosLectivos(objListadoAniosLectivos);
        this.objListadoAniosLectivos.forEach((anioLectivo) -> {
            comboBoxModel.addElement(anioLectivo);
        });

        this.jCBAnioLectivo.setModel(comboBoxModel);
    }

    private void listarHorarioTable() {
        DefaultTableModel tableModel = (DefaultTableModel) this.jTbHorario.getModel();
        tableModel.setRowCount(0);

        Horario objBusqueda = new Horario();

        objBusqueda.setAnioLectivo(this.objAnioLectivo);
        objBusqueda.setDocente(this.objDocente);

        this.objListadoHorarios = new ArrayList<>();
        this.objListadoHorarios = objLogicaHorario.cargarHorarioVisualizar(objBusqueda);

        // CARGAR LAS FILAS CON LAS HORAS
        objListadoHoras.forEach((horaHorario) -> {

            if (horaHorario.getIdHora() == numPeriodoRecreo) {
                Object[] fila = {"R", "E", "C", "R", "E", "O"};
                tableModel.addRow(fila);
            } else if (horaHorario.getIdHora() == numPeriodos) {
                Object[] fila = {"S", "A", "L", "I", "D", "A"};
                tableModel.addRow(fila);
            } else {
                Object[] fila = new Object[tableModel.getColumnCount()];
                tableModel.addRow(fila);
                tableModel.setValueAt(imprimirHora(horaHorario.getHoraInicio(), "HH:mm")
                        + " - " + imprimirHora(horaHorario.getHoraFin(), "HH:mm"),
                        horaHorario.getIdHora(), 0);
            }

        });

        // CARGAR LOS HORARIOS
        objListadoHorarios.forEach((horario) -> {

            horario.setPresentar(true);

            tableModel.setValueAt(horario,
                    obtenerIndiceHora(horario),
                    obtenerIndiceDia(horario));

        });

        // ESTILOS PARA LA TABLA
        obtenerEstilosTable();
    }

    private int obtenerIndiceHora(Horario horario) {
        int indice = -1;
        for (Hora hora : objListadoHoras) {
            if (imprimirHora(horario.getHoraInicio(), "HH:mm").equals(imprimirHora(hora.getHoraInicio(), "HH:mm"))) {
                indice = hora.getIdHora();
            }
        }
        return indice;
    }

    private int obtenerIndiceDia(Horario horario) {
        int indice = -1;
        switch (horario.getDia()) {
            case "Lunes":
                indice = 1;
                break;
            case "Martes":
                indice = 2;
                break;
            case "Miercoles":
                indice = 3;
                break;
            case "Jueves":
                indice = 4;
                break;
            case "Viernes":
                indice = 5;
                break;
        }
        return indice;
    }

    private void obtenerEstilosTable() {

        for (int i = 0; i < this.jTbHorario.getRowCount(); i++) {
            this.jTbHorario.setRowHeight(i, 25);
        }

    }

    // MÉTODOS DE LA CLASE:
    private boolean comprobarAutenticacion() { // COMPRUEBA QUE UN DOCENTE SE HA AUTENTICADO
        if (getObjDocente() == null) {
            JOptionPane.showMessageDialog(null, "¡No Reconocido!", "Autenticación", JOptionPane.ERROR_MESSAGE);
            Autenticacion autenticacion = new Autenticacion();
            autenticacion.setVisible(true);
            this.dispose();
            return false;
        }
        return true;
    }

    private Docente getObjDocente() {
        return this.objDocente;
    }

    public void setObjDocente(Docente objDocente) {
        this.objDocente = new Docente();
        this.objDocente = objDocente;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnVolver;
    private javax.swing.JComboBox<String> jCBAnioLectivo;
    private javax.swing.JLabel jLAnioLectivo;
    private javax.swing.JLabel jLVisualizarHorario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTbHorario;
    // End of variables declaration//GEN-END:variables

}
